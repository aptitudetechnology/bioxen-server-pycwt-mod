============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.4.2, pluggy-1.6.0 -- /usr/bin/python3
cachedir: .pytest_cache
benchmark: 5.1.0 (defaults: timer=time.perf_counter disable_gc=False min_rounds=5 min_time=0.000005 max_time=1.0 calibration_precision=10 warmup=False warmup_iterations=100000)
rootdir: /home/chris/pycwt-mod
configfile: pyproject.toml
plugins: benchmark-5.1.0, mypy-1.0.1, flake8-1.3.0, Faker-37.8.0, pylint-0.21.0, anyio-4.11.0, mock-3.15.1, xdist-3.8.0, timeout-2.4.0, cov-7.0.0, asyncio-1.2.0
asyncio: mode=strict, debug=False, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 4 items

client-tests/test_wavelet.py::TestWaveletCoherence::test_wct_different_mc_counts[10] FAILED [ 25%]
client-tests/test_wavelet.py::TestWaveletCoherence::test_wct_different_mc_counts[50] FAILED [ 50%]
client-tests/test_wavelet.py::TestWaveletCoherence::test_wct_different_mc_counts[100] FAILED [ 75%]
client-tests/test_wavelet.py::TestWaveletCoherence::test_wct_different_mc_counts[300] FAILED [100%]

=================================== FAILURES ===================================
____________ TestWaveletCoherence.test_wct_different_mc_counts[10] _____________

self = <test_wavelet.TestWaveletCoherence object at 0x7f6e53dd6950>
test_client = <httpx.Client object at 0x7f6e53dd6fe0>, api_base_url = '/api/v1'
sample_signal_pair = (array([ 2.51919233e-01,  1.57523995e-01,  4.23383200e-01,  6.28958556e-01,
        2.32688646e-01,  6.06740696e-01,  ...690e-01,  5.40515327e-02,  3.57597639e-01,
        3.56462484e-01,  1.42395523e-01,  4.83651297e-01,  5.97779010e-01]))
mc_count = 10

    @pytest.mark.parametrize("mc_count", [10, 50, 100, 300])
    def test_wct_different_mc_counts(self, test_client, api_base_url, sample_signal_pair, mc_count):
        """Test WCT with different Monte Carlo iteration counts."""
        signal1, signal2 = sample_signal_pair
    
        request = {
            "signal1": signal1[:100].tolist(),
            "signal2": signal2[:100].tolist(),
            "dt": 0.01,
            "mc_count": mc_count,
            "backend": "sequential"
        }
    
        response = test_client.post(
            f"{api_base_url}/wavelet/wct",
            json=request
        )
    
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

client-tests/test_wavelet.py:255: AssertionError
____________ TestWaveletCoherence.test_wct_different_mc_counts[50] _____________

self = <test_wavelet.TestWaveletCoherence object at 0x7f6e53dd6a10>
test_client = <httpx.Client object at 0x7f6e53bf38b0>, api_base_url = '/api/v1'
sample_signal_pair = (array([-0.10473571,  0.15279356,  0.45093926,  0.42017094,  0.6803327 ,
        0.87024577,  0.96402167,  0.63001127,...72586, -0.14301221, -0.07075647, -0.0294101 ,
       -0.18937029,  0.65227967,  0.21663095,  0.43132284,  1.0126247 ]))
mc_count = 50

    @pytest.mark.parametrize("mc_count", [10, 50, 100, 300])
    def test_wct_different_mc_counts(self, test_client, api_base_url, sample_signal_pair, mc_count):
        """Test WCT with different Monte Carlo iteration counts."""
        signal1, signal2 = sample_signal_pair
    
        request = {
            "signal1": signal1[:100].tolist(),
            "signal2": signal2[:100].tolist(),
            "dt": 0.01,
            "mc_count": mc_count,
            "backend": "sequential"
        }
    
        response = test_client.post(
            f"{api_base_url}/wavelet/wct",
            json=request
        )
    
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

client-tests/test_wavelet.py:255: AssertionError
____________ TestWaveletCoherence.test_wct_different_mc_counts[100] ____________

self = <test_wavelet.TestWaveletCoherence object at 0x7f6e53dd6c50>
test_client = <httpx.Client object at 0x7f6e53be97b0>, api_base_url = '/api/v1'
sample_signal_pair = (array([ 0.01514838, -0.29074132,  0.02303713,  0.56819776,  0.98678847,
        0.46723441,  0.56894287,  0.73044552,...456e-01, -2.31080772e-01,  1.25005773e-01,
        1.59547700e-01,  3.20896229e-01,  5.13989508e-01,  4.40604534e-01]))
mc_count = 100

    @pytest.mark.parametrize("mc_count", [10, 50, 100, 300])
    def test_wct_different_mc_counts(self, test_client, api_base_url, sample_signal_pair, mc_count):
        """Test WCT with different Monte Carlo iteration counts."""
        signal1, signal2 = sample_signal_pair
    
        request = {
            "signal1": signal1[:100].tolist(),
            "signal2": signal2[:100].tolist(),
            "dt": 0.01,
            "mc_count": mc_count,
            "backend": "sequential"
        }
    
        response = test_client.post(
            f"{api_base_url}/wavelet/wct",
            json=request
        )
    
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

client-tests/test_wavelet.py:255: AssertionError
____________ TestWaveletCoherence.test_wct_different_mc_counts[300] ____________

self = <test_wavelet.TestWaveletCoherence object at 0x7f6e53dd6d10>
test_client = <httpx.Client object at 0x7f6e53921bd0>, api_base_url = '/api/v1'
sample_signal_pair = (array([ 7.02467463e-02,  5.43537681e-01,  5.86937630e-01,  3.66892233e-01,
        4.20175026e-01,  7.89252300e-01,  ...375e-02,  1.15436681e-01,  1.74114052e-01,
        4.06086548e-01,  8.67396194e-02,  4.45289872e-01,  8.40532813e-01]))
mc_count = 300

    @pytest.mark.parametrize("mc_count", [10, 50, 100, 300])
    def test_wct_different_mc_counts(self, test_client, api_base_url, sample_signal_pair, mc_count):
        """Test WCT with different Monte Carlo iteration counts."""
        signal1, signal2 = sample_signal_pair
    
        request = {
            "signal1": signal1[:100].tolist(),
            "signal2": signal2[:100].tolist(),
            "dt": 0.01,
            "mc_count": mc_count,
            "backend": "sequential"
        }
    
        response = test_client.post(
            f"{api_base_url}/wavelet/wct",
            json=request
        )
    
>       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = <Response [500 Internal Server Error]>.status_code

client-tests/test_wavelet.py:255: AssertionError
=========================== short test summary info ============================
FAILED client-tests/test_wavelet.py::TestWaveletCoherence::test_wct_different_mc_counts[10]
FAILED client-tests/test_wavelet.py::TestWaveletCoherence::test_wct_different_mc_counts[50]
FAILED client-tests/test_wavelet.py::TestWaveletCoherence::test_wct_different_mc_counts[100]
FAILED client-tests/test_wavelet.py::TestWaveletCoherence::test_wct_different_mc_counts[300]
============================== 4 failed in 1.28s ===============================
